Microsoft (R) Macro Assembler Version 11.00.50727.1	    09/15/16 12:31:25
main.asm						     Page 1 - 1


				; General comments
				; Author:  
				; Date: 
				; This is the Visual Studio 2012/Visual C++ Express Edition 2012 version   

				; Preprocessor directives
				.586		; use the 80586 set of instructions
				.MODEL FLAT	; use the flat memory model (only 32 bit addresses, no segment:offset)

				; External source files
				INCLUDE io.h   ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				; Stack configuration
				.STACK 4096	   ; allocate 4096 bytes for the stack

				; Named memory allocation and initialization
 00000000			.DATA
 00000000 00000000		number1   DWORD ?
 00000004 00000000		number2   DWORD ?
 00000008 45 6E 74 65 72	prompt1   BYTE  "Enter first number", 0
	   20 66 69 72 73
	   74 20 6E 75 6D
	   62 65 72 00
 0000001B 45 6E 74 65 72	prompt2   BYTE  "Enter second number", 0
	   20 73 65 63 6F
	   6E 64 20 6E 75
	   6D 62 65 72 00
 0000002F 45 6E 74 65 72	prompt3   BYTE  "Enter third number", 0
	   20 74 68 69 72
	   64 20 6E 75 6D
	   62 65 72 00
 00000042  00000028 [		string    BYTE  40 DUP (?)
	    00
	   ]
 0000006A 54 68 65 20 73	resultLbl BYTE  "The sum is", 0
	   75 6D 20 69 73
	   00
 00000075  0000000B [		sum       BYTE  11 DUP (?), 0
	    00
	   ] 00

				; procedure definitions
 00000000			.CODE
 00000000			_MainProc PROC
					input	prompt1,	string,	40	; display promt1 and read input into string
					atod	string					; convert string to integer
 0000002D  A3 00000000 R		mov		number1,	eax			; store resulting integer at number1

					input	prompt2,	string,	40	; display prompt2 and read input into string
					atod	string					; convert string to integer
 0000005F  A3 00000004 R		mov		number2,	eax			; store resulting integer at number2

					input	prompt3,	string,	40	; display prompt3 and read input into string
					atod	string					; convert string to integer
													; there is no need to store this integer,
													; because we will immediately add it to the second input.

 00000091  03 05 00000004 R		add		eax,		number2		; add third input to second input
													; (the third input is still stored in eax)
 00000097  03 05 00000000 R		add		eax,		number1		; add the first input to the previous sum
													; (the sum of the second and third inputs are stil stored in eax)
													; now the sum of the first, second and third inputs is stored in eax
					dtoa	sum,		eax			; convert result to ASCII and store it at the data location named "sum"
													; so that it can be displayed in the output window

					output	resultLbl,	sum			; output sum (from memory)

 000000CE  B8 00000000		    mov		eax,		0			; exit with return code 0
 000000D3  C3			    ret
 000000D4			_MainProc ENDP

				END   ; end of source code
Microsoft (R) Macro Assembler Version 11.00.50727.1	    09/15/16 12:31:25
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000081 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000D4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D4 Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
number1  . . . . . . . . . . . .	DWord	 00000000 _DATA	
number2  . . . . . . . . . . . .	DWord	 00000004 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000008 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000001B _DATA	
prompt3  . . . . . . . . . . . .	Byte	 0000002F _DATA	
resultLbl  . . . . . . . . . . .	Byte	 0000006A _DATA	
string . . . . . . . . . . . . .	Byte	 00000042 _DATA	
sum  . . . . . . . . . . . . . .	Byte	 00000075 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
